name: Windows Build

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  WINDOWS_CERTIFICATE_FILE: ${{ github.workspace }}/cert.pfx
  WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc, aarch64-pc-windows-msvc]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: ui/desktop/package-lock.json

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install Windows build tools
      run: |
        choco install -y llvm --version=17.0.6
        choco install -y visualstudio2022buildtools --package-parameters="--add Microsoft.VisualStudio.Component.VC.Tools.ARM64"

    - name: Decode certificate
      if: github.event_name != 'pull_request'
      run: |
        echo "${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}" | base64 --decode > cert.pfx

    - name: Install dependencies
      run: |
        cd ui/desktop
        npm ci

    - name: Build Rust binaries
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Sign Rust binaries
      if: github.event_name != 'pull_request'
      run: |
        ./scripts/windows/sign.ps1 -FilePath "target/${{ matrix.target }}/release/goose.exe" -CertPath "${{ env.WINDOWS_CERTIFICATE_FILE }}" -CertPassword "${{ env.WINDOWS_CERTIFICATE_PASSWORD }}"
        ./scripts/windows/sign.ps1 -FilePath "target/${{ matrix.target }}/release/goose-server.exe" -CertPath "${{ env.WINDOWS_CERTIFICATE_FILE }}" -CertPassword "${{ env.WINDOWS_CERTIFICATE_PASSWORD }}"

    - name: Build Electron app
      run: |
        cd ui/desktop
        npm run make

    - name: Create installer
      if: github.event_name != 'pull_request'
      run: |
        cd ui/desktop
        npm run make -- --targets @electron-forge/maker-squirrel

    - name: Sign installer
      if: github.event_name != 'pull_request'
      run: |
        ./scripts/windows/sign.ps1 -FilePath "ui/desktop/out/make/squirrel.windows/${{ matrix.target }}/Goose-Setup.exe" -CertPath "${{ env.WINDOWS_CERTIFICATE_FILE }}" -CertPassword "${{ env.WINDOWS_CERTIFICATE_PASSWORD }}"

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ui/desktop/out/make/squirrel.windows/${{ matrix.target }}/Goose-Setup.exe
          target/${{ matrix.target }}/release/goose.exe
          target/${{ matrix.target }}/release/goose-server.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
